buf0: SchedulerNode(CUDATemplateBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 1048576})]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='arg0_1'), StarDep(name='arg1_1')]
buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]
buf0.group.device = cuda:0
buf0.group.iteration = (1048576, 1)
buf0.sizes = ([2048, 512], ())


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 1048576})]
buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 1048576})]
buf1.met_dependencies = [MemoryDep('arg2_1', c0, {c0: 1048576})]
buf1.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf1.group.device = cuda:0
buf1.group.iteration = (1048576, 1)
buf1.sizes = ([1048576], [])
class buf1_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(3.3, torch.float16)
        mul = ops.mul(load_1, constant)
        sub = ops.sub(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1', get_index_2, sub, None)
        return store


